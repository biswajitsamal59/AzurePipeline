parameters:
  environment: ''
  location: ''
  serviceConnection: ''
  tfversion: ''
  application: ''

steps:

  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

  - script: rm -fr .terraform/modules/${{ parameters.stack }}
    displayName: 'Removing temp modules'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
      terraformVersion: ${{ parameters.tfversion }}

  - task: InstallSSHKey@0
    displayName: 'Install ADO GIT SSH key'
    inputs:
      knownHostsEntry: localhost
      sshKeySecureFile: 'azure-repo'

  - task: TerraformCLI@0
    displayName: terraform init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      backendType: azurerm
      backendServiceArm: $(serviceConnection)
      backendAzureRmResourceGroupName: 'control-${{ parameters.environment }}-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.application }}/${{ parameters.environment }}/terraform.tfstate'

  - task: TerraformCLI@0
    displayName: terraform validate
    inputs:
      command: validate
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

  - task: TerraformCLI@0
    displayName: terraform plan
    inputs:
      command: plan
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      environmentServiceName: $(serviceConnection)
      commandOptions: '-out=${{ parameters.location }}-${{ parameters.application }}-${{ parameters.environment }}-tfplan -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var environment=${{ parameters.environment }} -var application=${{ parameters.application }} -var-file=$(System.DefaultWorkingDirectory)/environment/${{ parameters.environment }}.tfvars'

#   - task: ManualValidation@0
#     timeoutInMinutes: 1440 # task times out in 1 day
#     inputs:
#       notifyUsers: |
#         test@test.com
#         example@example.com
#       instructions: 'Please validate the build configuration and resume'
#       onTimeout: 'reject'

  - task: TerraformCLI@0
    displayName: Terraform apply
    condition: and(succeeded(), eq(variables['action'], 'Apply'))
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/components'
      environmentServiceName: $(serviceConnection)
      commandOptions: '--auto-approve ${{ parameters.location }}-${{ parameters.application }}-${{ parameters.environment }}-tfplan'