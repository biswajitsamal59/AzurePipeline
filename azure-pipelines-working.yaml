# Terraform Azure DevOps auth using Workload Identity Federaion
# Create a MI in azure and map Federated Credential to azure devops Issuer
# MI should have "Contributor" role to the subscription where you want to create resource
name: Provision Infra using Terraform
trigger:
- none

pool: 
  vmImage: ubuntu-latest

# variables:
#   anyTfChanges: false
  
steps:
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: 'latest'

# Along with above permission, MI should have atleast "Storage Blob Data Contributor" role for the storage container to setup terraform backend
  - task: TerraformTaskV4@4
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      backendServiceArm: 'Azure-Service-Connection-Development-WIF'
      backendAzureRmResourceGroupName: 'rg-juiceshop-dev-lod'
      backendAzureRmStorageAccountName: 'terraform59sa'
      backendAzureRmContainerName: 'subscription-tfstate'
      backendAzureRmKey: 'terraform.tfstate'
    env:
      ARM_USE_AZUREAD: true # Optional (Previously was being used when WIF was a preview in Azure DevOps)

  - task: TerraformTaskV4@4
    name: terraformPlan # This task name used to check if there are any changes needed
    displayName: Terraform Plan
    inputs:
      provider: 'azurerm'
      command: plan
      workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      environmentServiceNameAzureRM: 'Azure-Service-Connection-Development-WIF'
      commandOptions: '-out=terraform-tfplan'
    env:
      ARM_USE_AZUREAD: true # Optional

  # - bash: |
  #     #!/bin/bash

  #     # Run terraform show and store the JSON output in a variable
  #     plan=$(terraform show -json terraform-tfplan)

  #     # Parse the JSON using jq and extract the actions
  #     actions=$(echo "$plan" | jq -r '.resource_changes[].change.actions[]')

  #     echo "Terraform actions : $actions"

  #     if [[ $actions == *create* || $actions == *delete* || $actions == *update* ]]; then
  #       echo "Terraform will perform the following actions : $actions"
  #       echo "##vso[task.setvariable variable=anyTfChanges;]true"
  #     else
  #       echo "There is no change detected in Terraform terraform-tfplan file"
  #     fi
  #   workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
  #   displayName: Check Changes Required

  # - task: PowerShell@2  # For windows agent
  #   displayName: detect any terraform change
  #   inputs:
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
  #     targetType: 'inline'
  #     script: |
  #       # Write-Host "LASTEXITCODE : $LASTEXITCODE"
  #       $plan = $(terraform show -json tfplan | ConvertFrom-Json)
  #       $actions = $plan.resource_changes.change.actions
  #       Write-Host "Terraform actions : $actions"
  #       if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
  #       {
  #         Write-Host "Terraform will perform the following actions : $actions"
  #         Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
  #       }
  #       else
  #       {
  #         Write-Host "There is no change detected in Terraform tfplan file"
  #       }

  - task: TerraformTaskV4@4
    # condition: eq(variables.anyTfChanges, true)
    condition: eq(variables['terraformPlan.changesPresent'], 'true') # changesPresent: This varaible is set to true if the plan command finds changes to apply
    displayName: Terraform Apply
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
      commandOptions: '--auto-approve'
      environmentServiceNameAzureRM: 'Azure-Service-Connection-Development-WIF'
    env:
      ARM_USE_AZUREAD: true # Optional